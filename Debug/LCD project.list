
LCD project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800461c  0800461c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  0000614c  2**0
                  CONTENTS
  4 .ARM          00000008  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d4  080046d4  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  080046e8  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004788  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000067c  2000014c  08004828  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007c8  08004828  000067c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011a2c  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000248e  00000000  00000000  00017ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d50  00000000  00000000  0001a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a3e  00000000  00000000  0001ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028486  00000000  00000000  0001b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010893  00000000  00000000  00043c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8f43  00000000  00000000  000544df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014d422  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003764  00000000  00000000  0014d468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00150bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004604 	.word	0x08004604

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004604 	.word	0x08004604

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <display_digit_1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display_digit_1() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

		// Updates each segment by looking at the i'th binary digit to turn on or off the corresponding led of the 7 segment led. we used bitsifting by i to get the correct digit value.
		for (int i = 0; i < 9; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	e018      	b.n	8000566 <display_digit_1+0x3e>
			HAL_GPIO_WritePin(SEGMENT_PORT, SEGMENT_PINS_1[i], (HEX_TO_SEGMENT[first] >> i) & 0x01);
 8000534:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <display_digit_1+0x50>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800053c:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <display_digit_1+0x54>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	461a      	mov	r2, r3
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <display_digit_1+0x58>)
 8000544:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	fa42 f303 	asr.w	r3, r2, r3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <display_digit_1+0x5c>)
 800055c:	f001 fdb8 	bl	80020d0 <HAL_GPIO_WritePin>
		for (int i = 0; i < 9; i++) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b08      	cmp	r3, #8
 800056a:	dde3      	ble.n	8000534 <display_digit_1+0xc>
		}
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	0800461c 	.word	0x0800461c
 800057c:	20000168 	.word	0x20000168
 8000580:	08004658 	.word	0x08004658
 8000584:	40020400 	.word	0x40020400

08000588 <display_digit_2>:
void display_digit_2() {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

		// Updates each segment by looking at the i'th binary digit to turn on or off the corresponding led of the 7 segment led. we used bitsifting by i to get the correct digit value.
		for (int i = 0; i < 9; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e018      	b.n	80005c6 <display_digit_2+0x3e>
			HAL_GPIO_WritePin(SEGMENT_PORT, SEGMENT_PINS_2[i], (HEX_TO_SEGMENT[second] >> i) & 0x01);
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <display_digit_2+0x50>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <display_digit_2+0x54>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <display_digit_2+0x58>)
 80005a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	fa42 f303 	asr.w	r3, r2, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	480a      	ldr	r0, [pc, #40]	@ (80005e4 <display_digit_2+0x5c>)
 80005bc:	f001 fd88 	bl	80020d0 <HAL_GPIO_WritePin>
		for (int i = 0; i < 9; i++) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	dde3      	ble.n	8000594 <display_digit_2+0xc>
		}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	08004630 	.word	0x08004630
 80005dc:	20000169 	.word	0x20000169
 80005e0:	08004658 	.word	0x08004658
 80005e4:	40020400 	.word	0x40020400

080005e8 <close_disp_1>:

void close_disp_1(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SEGMENT_PORT, SEGMENT_PINS_1[8], (NO_SEGMENT[0] >> 8) & 0x01);
 80005ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <close_disp_1+0x18>)
 80005f6:	f001 fd6b 	bl	80020d0 <HAL_GPIO_WritePin>

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400

08000604 <close_disp_2>:

void close_disp_2(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SEGMENT_PORT, SEGMENT_PINS_2[8], (NO_SEGMENT[0] >> 8) & 0x01);
 8000608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <close_disp_2+0x18>)
 8000612:	f001 fd5d 	bl	80020d0 <HAL_GPIO_WritePin>

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020400 	.word	0x40020400

08000620 <start_up>:

void start_up(){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 ff36 	bl	8001498 <HAL_Delay>

	for(int j = 0; j < 9; j++){
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e034      	b.n	800069c <start_up+0x7c>

		for (int i = 0; i < 4; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	e016      	b.n	8000666 <start_up+0x46>
			HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (START_SEQ[j] >> i) & 0x01);
 8000638:	4a1d      	ldr	r2, [pc, #116]	@ (80006b0 <start_up+0x90>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000640:	4a1c      	ldr	r2, [pc, #112]	@ (80006b4 <start_up+0x94>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	461a      	mov	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fa42 f303 	asr.w	r3, r2, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <start_up+0x98>)
 800065c:	f001 fd38 	bl	80020d0 <HAL_GPIO_WritePin>
		for (int i = 0; i < 4; i++) {
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b03      	cmp	r3, #3
 800066a:	dde5      	ble.n	8000638 <start_up+0x18>
		}

		HAL_Delay(5);
 800066c:	2005      	movs	r0, #5
 800066e:	f000 ff13 	bl	8001498 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000678:	4810      	ldr	r0, [pc, #64]	@ (80006bc <start_up+0x9c>)
 800067a:	f001 fd29 	bl	80020d0 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f000 ff0a 	bl	8001498 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <start_up+0x9c>)
 800068c:	f001 fd20 	bl	80020d0 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8000690:	2005      	movs	r0, #5
 8000692:	f000 ff01 	bl	8001498 <HAL_Delay>
	for(int j = 0; j < 9; j++){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b08      	cmp	r3, #8
 80006a0:	ddc7      	ble.n	8000632 <start_up+0x12>

	}

	line = 0;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <start_up+0xa0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08004644 	.word	0x08004644
 80006b4:	08004698 	.word	0x08004698
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	2000016a 	.word	0x2000016a

080006c4 <bottom_row>:


void bottom_row(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

	//writing our names to display and setting cursor to the second line
	get_digit_and_write_to_disp(4,5);
 80006ca:	2105      	movs	r1, #5
 80006cc:	2004      	movs	r0, #4
 80006ce:	f000 f89b 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(6,7);
 80006d2:	2107      	movs	r1, #7
 80006d4:	2006      	movs	r0, #6
 80006d6:	f000 f897 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(6,5);
 80006da:	2105      	movs	r1, #5
 80006dc:	2006      	movs	r0, #6
 80006de:	f000 f893 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(2,0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f88f 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(2,13);
 80006ea:	210d      	movs	r1, #13
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 f88b 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(2,0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2002      	movs	r0, #2
 80006f6:	f000 f887 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(4,5);
 80006fa:	2105      	movs	r1, #5
 80006fc:	2004      	movs	r0, #4
 80006fe:	f000 f883 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(6,13);
 8000702:	210d      	movs	r1, #13
 8000704:	2006      	movs	r0, #6
 8000706:	f000 f87f 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(7,2);
 800070a:	2102      	movs	r1, #2
 800070c:	2007      	movs	r0, #7
 800070e:	f000 f87b 	bl	8000808 <get_digit_and_write_to_disp>
	get_digit_and_write_to_disp(6,5);
 8000712:	2105      	movs	r1, #5
 8000714:	2006      	movs	r0, #6
 8000716:	f000 f877 	bl	8000808 <get_digit_and_write_to_disp>


	for(int j = 0; j < 2; j++){
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e060      	b.n	80007e2 <bottom_row+0x11e>

		if (line == 0){
 8000720:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <bottom_row+0x130>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d11f      	bne.n	8000768 <bottom_row+0xa4>
			for (int i = 0; i < 4; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	e016      	b.n	800075c <bottom_row+0x98>
				HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (BOTTOM_ROW[j] >> i) & 0x01);
 800072e:	4a32      	ldr	r2, [pc, #200]	@ (80007f8 <bottom_row+0x134>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000736:	4a31      	ldr	r2, [pc, #196]	@ (80007fc <bottom_row+0x138>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	fa42 f303 	asr.w	r3, r2, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	482b      	ldr	r0, [pc, #172]	@ (8000800 <bottom_row+0x13c>)
 8000752:	f001 fcbd 	bl	80020d0 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	3301      	adds	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2b03      	cmp	r3, #3
 8000760:	dde5      	ble.n	800072e <bottom_row+0x6a>
			}

			line = 1;
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <bottom_row+0x130>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]

		}

		if (line == 1){
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <bottom_row+0x130>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d120      	bne.n	80007b2 <bottom_row+0xee>
			for (int i = 0; i < 4; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e017      	b.n	80007a6 <bottom_row+0xe2>
				HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (BOTTOM_ROW[j+2] >> i) & 0x01);
 8000776:	4a20      	ldr	r2, [pc, #128]	@ (80007f8 <bottom_row+0x134>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3302      	adds	r3, #2
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <bottom_row+0x138>)
 8000784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000788:	461a      	mov	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	fa42 f303 	asr.w	r3, r2, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	4819      	ldr	r0, [pc, #100]	@ (8000800 <bottom_row+0x13c>)
 800079c:	f001 fc98 	bl	80020d0 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	dde4      	ble.n	8000776 <bottom_row+0xb2>
			}

			line = 0;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <bottom_row+0x130>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]

		}

		HAL_Delay(5);
 80007b2:	2005      	movs	r0, #5
 80007b4:	f000 fe70 	bl	8001498 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <bottom_row+0x140>)
 80007c0:	f001 fc86 	bl	80020d0 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 80007c4:	2005      	movs	r0, #5
 80007c6:	f000 fe67 	bl	8001498 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <bottom_row+0x140>)
 80007d2:	f001 fc7d 	bl	80020d0 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 80007d6:	2005      	movs	r0, #5
 80007d8:	f000 fe5e 	bl	8001498 <HAL_Delay>
	for(int j = 0; j < 2; j++){
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	dd9b      	ble.n	8000720 <bottom_row+0x5c>

	}

}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000016a 	.word	0x2000016a
 80007f8:	08004644 	.word	0x08004644
 80007fc:	080046ac 	.word	0x080046ac
 8000800:	40021000 	.word	0x40021000
 8000804:	40020c00 	.word	0x40020c00

08000808 <get_digit_and_write_to_disp>:


void get_digit_and_write_to_disp(uint8_t a, uint8_t b){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800081e:	4838      	ldr	r0, [pc, #224]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 8000820:	f001 fc56 	bl	80020d0 <HAL_GPIO_WritePin>

	for (int i = 0; i < 4; i++) {
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e016      	b.n	8000858 <get_digit_and_write_to_disp+0x50>
		HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (HEX_TO_CHAR[a] >> i) & 0x01);
 800082a:	4a36      	ldr	r2, [pc, #216]	@ (8000904 <get_digit_and_write_to_disp+0xfc>)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a34      	ldr	r2, [pc, #208]	@ (8000908 <get_digit_and_write_to_disp+0x100>)
 8000836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	fa42 f303 	asr.w	r3, r2, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	482f      	ldr	r0, [pc, #188]	@ (800090c <get_digit_and_write_to_disp+0x104>)
 800084e:	f001 fc3f 	bl	80020d0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b03      	cmp	r3, #3
 800085c:	dde5      	ble.n	800082a <get_digit_and_write_to_disp+0x22>
	}

	HAL_Delay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f000 fe1a 	bl	8001498 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800086a:	4825      	ldr	r0, [pc, #148]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 800086c:	f001 fc30 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8000870:	2005      	movs	r0, #5
 8000872:	f000 fe11 	bl	8001498 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800087c:	4820      	ldr	r0, [pc, #128]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 800087e:	f001 fc27 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8000882:	2005      	movs	r0, #5
 8000884:	f000 fe08 	bl	8001498 <HAL_Delay>

	for (int i = 0; i < 4; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	e016      	b.n	80008bc <get_digit_and_write_to_disp+0xb4>
		HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (HEX_TO_CHAR[b] >> i) & 0x01);
 800088e:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <get_digit_and_write_to_disp+0xfc>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <get_digit_and_write_to_disp+0x100>)
 800089a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089e:	461a      	mov	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	fa42 f303 	asr.w	r3, r2, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	4816      	ldr	r0, [pc, #88]	@ (800090c <get_digit_and_write_to_disp+0x104>)
 80008b2:	f001 fc0d 	bl	80020d0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	dde5      	ble.n	800088e <get_digit_and_write_to_disp+0x86>
	}

	HAL_Delay(5);
 80008c2:	2005      	movs	r0, #5
 80008c4:	f000 fde8 	bl	8001498 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 80008d0:	f001 fbfe 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80008d4:	2005      	movs	r0, #5
 80008d6:	f000 fddf 	bl	8001498 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 80008e2:	f001 fbf5 	bl	80020d0 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80008e6:	2005      	movs	r0, #5
 80008e8:	f000 fdd6 	bl	8001498 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f2:	4803      	ldr	r0, [pc, #12]	@ (8000900 <get_digit_and_write_to_disp+0xf8>)
 80008f4:	f001 fbec 	bl	80020d0 <HAL_GPIO_WritePin>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020c00 	.word	0x40020c00
 8000904:	08004644 	.word	0x08004644
 8000908:	08004678 	.word	0x08004678
 800090c:	40021000 	.word	0x40021000

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	@ 0x40
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fd62 	bl	80013de <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_InitTypeDef GPIO_InitStruct_1 = {0};
 800091a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct_1.Pin = SEGMENT_PINS_1[0] | SEGMENT_PINS_1[1] | SEGMENT_PINS_1[2] |
 800092a:	2202      	movs	r2, #2
 800092c:	2304      	movs	r3, #4
		  	  	  	  	  SEGMENT_PINS_1[3] | SEGMENT_PINS_1[4] | SEGMENT_PINS_1[5] |
						  SEGMENT_PINS_1[6] | SEGMENT_PINS_1[7] | SEGMENT_PINS_1[8];
 800092e:	4313      	orrs	r3, r2
 8000930:	b29b      	uxth	r3, r3
  GPIO_InitStruct_1.Pin = SEGMENT_PINS_1[0] | SEGMENT_PINS_1[1] | SEGMENT_PINS_1[2] |
 8000932:	2210      	movs	r2, #16
						  SEGMENT_PINS_1[6] | SEGMENT_PINS_1[7] | SEGMENT_PINS_1[8];
 8000934:	4313      	orrs	r3, r2
 8000936:	b29b      	uxth	r3, r3
		  	  	  	  	  SEGMENT_PINS_1[3] | SEGMENT_PINS_1[4] | SEGMENT_PINS_1[5] |
 8000938:	2220      	movs	r2, #32
						  SEGMENT_PINS_1[6] | SEGMENT_PINS_1[7] | SEGMENT_PINS_1[8];
 800093a:	4313      	orrs	r3, r2
 800093c:	b29b      	uxth	r3, r3
		  	  	  	  	  SEGMENT_PINS_1[3] | SEGMENT_PINS_1[4] | SEGMENT_PINS_1[5] |
 800093e:	f44f 7280 	mov.w	r2, #256	@ 0x100
						  SEGMENT_PINS_1[6] | SEGMENT_PINS_1[7] | SEGMENT_PINS_1[8];
 8000942:	4313      	orrs	r3, r2
 8000944:	b29b      	uxth	r3, r3
		  	  	  	  	  SEGMENT_PINS_1[3] | SEGMENT_PINS_1[4] | SEGMENT_PINS_1[5] |
 8000946:	f44f 7200 	mov.w	r2, #512	@ 0x200
						  SEGMENT_PINS_1[6] | SEGMENT_PINS_1[7] | SEGMENT_PINS_1[8];
 800094a:	4313      	orrs	r3, r2
 800094c:	b29b      	uxth	r3, r3
 800094e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000952:	4313      	orrs	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800095a:	4313      	orrs	r3, r2
 800095c:	b29b      	uxth	r3, r3
 800095e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000962:	4313      	orrs	r3, r2
 8000964:	b29b      	uxth	r3, r3
  GPIO_InitStruct_1.Pin = SEGMENT_PINS_1[0] | SEGMENT_PINS_1[1] | SEGMENT_PINS_1[2] |
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct_1.Mode  = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct_1.Pull  = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct_1.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SEGMENT_PORT, &GPIO_InitStruct_1);
 8000974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	4874      	ldr	r0, [pc, #464]	@ (8000b4c <main+0x23c>)
 800097c:	f001 f9e4 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitTypeDef GPIO_InitStruct_2 = {0};
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct_2.Pin = SEGMENT_PINS_2[0] | SEGMENT_PINS_2[1] | SEGMENT_PINS_2[2] |
 8000990:	2202      	movs	r2, #2
 8000992:	2304      	movs	r3, #4
		   	   	   	   	  SEGMENT_PINS_2[3] | SEGMENT_PINS_2[4] | SEGMENT_PINS_2[5] |
						  SEGMENT_PINS_2[6] | SEGMENT_PINS_2[7] | SEGMENT_PINS_2[8];
 8000994:	4313      	orrs	r3, r2
 8000996:	b29b      	uxth	r3, r3
  GPIO_InitStruct_2.Pin = SEGMENT_PINS_2[0] | SEGMENT_PINS_2[1] | SEGMENT_PINS_2[2] |
 8000998:	2210      	movs	r2, #16
						  SEGMENT_PINS_2[6] | SEGMENT_PINS_2[7] | SEGMENT_PINS_2[8];
 800099a:	4313      	orrs	r3, r2
 800099c:	b29b      	uxth	r3, r3
		   	   	   	   	  SEGMENT_PINS_2[3] | SEGMENT_PINS_2[4] | SEGMENT_PINS_2[5] |
 800099e:	2220      	movs	r2, #32
						  SEGMENT_PINS_2[6] | SEGMENT_PINS_2[7] | SEGMENT_PINS_2[8];
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b29b      	uxth	r3, r3
		   	   	   	   	  SEGMENT_PINS_2[3] | SEGMENT_PINS_2[4] | SEGMENT_PINS_2[5] |
 80009a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
						  SEGMENT_PINS_2[6] | SEGMENT_PINS_2[7] | SEGMENT_PINS_2[8];
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b29b      	uxth	r3, r3
		   	   	   	   	  SEGMENT_PINS_2[3] | SEGMENT_PINS_2[4] | SEGMENT_PINS_2[5] |
 80009ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
						  SEGMENT_PINS_2[6] | SEGMENT_PINS_2[7] | SEGMENT_PINS_2[8];
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b29b      	uxth	r3, r3
  GPIO_InitStruct_2.Pin = SEGMENT_PINS_2[0] | SEGMENT_PINS_2[1] | SEGMENT_PINS_2[2] |
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct_2.Mode  = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct_2.Pull  = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct_2.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SEGMENT_PORT, &GPIO_InitStruct_2);
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	4619      	mov	r1, r3
 80009e0:	485a      	ldr	r0, [pc, #360]	@ (8000b4c <main+0x23c>)
 80009e2:	f001 f9b1 	bl	8001d48 <HAL_GPIO_Init>

  GPIO_InitTypeDef GPIO_InitStruct_3 = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct_3.Pin   = LCD_PINS[0] | LCD_PINS[1] | LCD_PINS[2] | LCD_PINS[3];
 80009f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct_3.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct_3.Pull  = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct_3.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct_3);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	484b      	ldr	r0, [pc, #300]	@ (8000b50 <main+0x240>)
 8000a24:	f001 f990 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f89e 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f9ba 	bl	8000da4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a30:	f000 f90c 	bl	8000c4c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a34:	f000 f958 	bl	8000ce8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a38:	f000 f986 	bl	8000d48 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  first = 0;
 8000a3c:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <main+0x244>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
  second = 0;
 8000a42:	4b45      	ldr	r3, [pc, #276]	@ (8000b58 <main+0x248>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
  line = 0;
 8000a48:	4b44      	ldr	r3, [pc, #272]	@ (8000b5c <main+0x24c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]

  start_up();
 8000a4e:	f7ff fde7 	bl	8000620 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Count 1
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000a52:	2110      	movs	r1, #16
 8000a54:	4842      	ldr	r0, [pc, #264]	@ (8000b60 <main+0x250>)
 8000a56:	f001 fb23 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d109      	bne.n	8000a74 <main+0x164>
		  if(first <= 15){
 8000a60:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <main+0x244>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d805      	bhi.n	8000a74 <main+0x164>
			  first = (first + 1);
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <main+0x244>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <main+0x244>)
 8000a72:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // Decount 1
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) {
 8000a74:	2140      	movs	r1, #64	@ 0x40
 8000a76:	483a      	ldr	r0, [pc, #232]	@ (8000b60 <main+0x250>)
 8000a78:	f001 fb12 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <main+0x186>
		  if(first >= 1){
 8000a82:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <main+0x244>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d005      	beq.n	8000a96 <main+0x186>
			  first = (first - 1);
 8000a8a:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <main+0x244>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <main+0x244>)
 8000a94:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // Count 2
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8000a96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9a:	4832      	ldr	r0, [pc, #200]	@ (8000b64 <main+0x254>)
 8000a9c:	f001 fb00 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d109      	bne.n	8000aba <main+0x1aa>
		  if(second <= 15){
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <main+0x248>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d805      	bhi.n	8000aba <main+0x1aa>
			second = (second + 1);
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <main+0x248>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <main+0x248>)
 8000ab8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // Decount 2
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8000aba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000abe:	4829      	ldr	r0, [pc, #164]	@ (8000b64 <main+0x254>)
 8000ac0:	f001 faee 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d109      	bne.n	8000ade <main+0x1ce>
		  if(second >= 1){
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <main+0x248>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d005      	beq.n	8000ade <main+0x1ce>
			  second = (second - 1);
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <main+0x248>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <main+0x248>)
 8000adc:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
 8000ade:	2108      	movs	r1, #8
 8000ae0:	481f      	ldr	r0, [pc, #124]	@ (8000b60 <main+0x250>)
 8000ae2:	f001 fadd 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d107      	bne.n	8000afc <main+0x1ec>
		  get_digit_and_write_to_disp(first, second);
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <main+0x244>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <main+0x248>)
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe86 	bl	8000808 <get_digit_and_write_to_disp>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000afc:	2120      	movs	r1, #32
 8000afe:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <main+0x250>)
 8000b00:	f001 face 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d101      	bne.n	8000b0e <main+0x1fe>
		  start_up();
 8000b0a:	f7ff fd89 	bl	8000620 <start_up>
	  }


	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b12:	4814      	ldr	r0, [pc, #80]	@ (8000b64 <main+0x254>)
 8000b14:	f001 fac4 	bl	80020a0 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <main+0x212>
		  bottom_row();
 8000b1e:	f7ff fdd1 	bl	80006c4 <bottom_row>
	  }

	  // Display
	  display_digit_1(first);
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <main+0x244>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fcfe 	bl	8000528 <display_digit_1>
	  HAL_Delay(25);
 8000b2c:	2019      	movs	r0, #25
 8000b2e:	f000 fcb3 	bl	8001498 <HAL_Delay>
	  close_disp_1();
 8000b32:	f7ff fd59 	bl	80005e8 <close_disp_1>
	  display_digit_2(second);
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <main+0x248>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd24 	bl	8000588 <display_digit_2>
	  HAL_Delay(25);
 8000b40:	2019      	movs	r0, #25
 8000b42:	f000 fca9 	bl	8001498 <HAL_Delay>
	  close_disp_2();
 8000b46:	f7ff fd5d 	bl	8000604 <close_disp_2>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000b4a:	e782      	b.n	8000a52 <main+0x142>
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20000168 	.word	0x20000168
 8000b58:	20000169 	.word	0x20000169
 8000b5c:	2000016a 	.word	0x2000016a
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020800 	.word	0x40020800

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	@ 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2234      	movs	r2, #52	@ 0x34
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fd17 	bl	80045aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8c:	f001 fbf4 	bl	8002378 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a2b      	ldr	r2, [pc, #172]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb0:	4a25      	ldr	r2, [pc, #148]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bdc:	2360      	movs	r3, #96	@ 0x60
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fc21 	bl	8002438 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bfc:	f000 f9c8 	bl	8000f90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c00:	f001 fbca 	bl	8002398 <HAL_PWREx_EnableOverDrive>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f9c1 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2302      	movs	r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2103      	movs	r1, #3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 feb2 	bl	8002994 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c36:	f000 f9ab 	bl	8000f90 <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3750      	adds	r7, #80	@ 0x50
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <MX_ETH_Init+0x88>)
 8000c54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c64:	22e1      	movs	r2, #225	@ 0xe1
 8000c66:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c7c:	4a16      	ldr	r2, [pc, #88]	@ (8000cd8 <MX_ETH_Init+0x8c>)
 8000c7e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c86:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <MX_ETH_Init+0x90>)
 8000c8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c90:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_ETH_Init+0x94>)
 8000c92:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c96:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c9a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <MX_ETH_Init+0x84>)
 8000c9e:	f000 fd05 	bl	80016ac <HAL_ETH_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f000 f972 	bl	8000f90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cac:	2238      	movs	r2, #56	@ 0x38
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_ETH_Init+0x98>)
 8000cb2:	f003 fc7a 	bl	80045aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_ETH_Init+0x98>)
 8000cb8:	2221      	movs	r2, #33	@ 0x21
 8000cba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_ETH_Init+0x98>)
 8000cbe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000cc2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_ETH_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001a4 	.word	0x200001a4
 8000cd4:	40028000 	.word	0x40028000
 8000cd8:	200007bc 	.word	0x200007bc
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	2000016c 	.word	0x2000016c

08000ce8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000cee:	4a15      	ldr	r2, [pc, #84]	@ (8000d44 <MX_USART3_UART_Init+0x5c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART3_UART_Init+0x58>)
 8000d2c:	f002 fc80 	bl	8003630 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d36:	f000 f92b 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000254 	.word	0x20000254
 8000d44:	40004800 	.word	0x40004800

08000d48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d56:	2206      	movs	r2, #6
 8000d58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	f001 f9b9 	bl	8002102 <HAL_PCD_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 f8fb 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200002dc 	.word	0x200002dc

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b6e      	ldr	r3, [pc, #440]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b6b      	ldr	r3, [pc, #428]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd2:	4b68      	ldr	r3, [pc, #416]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a67      	ldr	r2, [pc, #412]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b65      	ldr	r3, [pc, #404]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b62      	ldr	r3, [pc, #392]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a61      	ldr	r2, [pc, #388]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b5c      	ldr	r3, [pc, #368]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a5b      	ldr	r2, [pc, #364]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b59      	ldr	r3, [pc, #356]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4b56      	ldr	r3, [pc, #344]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a55      	ldr	r2, [pc, #340]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b53      	ldr	r3, [pc, #332]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a4f      	ldr	r2, [pc, #316]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a49      	ldr	r2, [pc, #292]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b47      	ldr	r3, [pc, #284]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e62:	2200      	movs	r2, #0
 8000e64:	f64d 71b7 	movw	r1, #57271	@ 0xdfb7
 8000e68:	4843      	ldr	r0, [pc, #268]	@ (8000f78 <MX_GPIO_Init+0x1d4>)
 8000e6a:	f001 f931 	bl	80020d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|LD2_Pin|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000e74:	4841      	ldr	r0, [pc, #260]	@ (8000f7c <MX_GPIO_Init+0x1d8>)
 8000e76:	f001 f92b 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000e80:	483f      	ldr	r0, [pc, #252]	@ (8000f80 <MX_GPIO_Init+0x1dc>)
 8000e82:	f001 f925 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2140      	movs	r1, #64	@ 0x40
 8000e8a:	483e      	ldr	r0, [pc, #248]	@ (8000f84 <MX_GPIO_Init+0x1e0>)
 8000e8c:	f001 f920 	bl	80020d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4838      	ldr	r0, [pc, #224]	@ (8000f88 <MX_GPIO_Init+0x1e4>)
 8000ea8:	f000 ff4e 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000eac:	2378      	movs	r3, #120	@ 0x78
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4833      	ldr	r0, [pc, #204]	@ (8000f8c <MX_GPIO_Init+0x1e8>)
 8000ec0:	f000 ff42 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000ec4:	f64d 73b7 	movw	r3, #57271	@ 0xdfb7
 8000ec8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|LD2_Pin|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4826      	ldr	r0, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0x1d4>)
 8000ede:	f000 ff33 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ee2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4820      	ldr	r0, [pc, #128]	@ (8000f7c <MX_GPIO_Init+0x1d8>)
 8000efc:	f000 ff24 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f00:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4819      	ldr	r0, [pc, #100]	@ (8000f80 <MX_GPIO_Init+0x1dc>)
 8000f1a:	f000 ff15 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f1e:	2340      	movs	r3, #64	@ 0x40
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <MX_GPIO_Init+0x1e0>)
 8000f36:	f000 ff07 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_GPIO_Init+0x1e0>)
 8000f4e:	f000 fefb 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f52:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_GPIO_Init+0x1e4>)
 8000f68:	f000 feee 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	@ 0x38
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a4e      	ldr	r2, [pc, #312]	@ (800113c <HAL_ETH_MspInit+0x158>)
 8001002:	4293      	cmp	r3, r2
 8001004:	f040 8096 	bne.w	8001134 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001008:	4b4d      	ldr	r3, [pc, #308]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800100e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001012:	6313      	str	r3, [r2, #48]	@ 0x30
 8001014:	4b4a      	ldr	r3, [pc, #296]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101c:	623b      	str	r3, [r7, #32]
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	4a46      	ldr	r2, [pc, #280]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800102a:	6313      	str	r3, [r2, #48]	@ 0x30
 800102c:	4b44      	ldr	r3, [pc, #272]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4b41      	ldr	r3, [pc, #260]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800103e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001042:	6313      	str	r3, [r2, #48]	@ 0x30
 8001044:	4b3e      	ldr	r3, [pc, #248]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4a3a      	ldr	r2, [pc, #232]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6313      	str	r3, [r2, #48]	@ 0x30
 800105c:	4b38      	ldr	r3, [pc, #224]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b35      	ldr	r3, [pc, #212]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	4a34      	ldr	r2, [pc, #208]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	@ 0x30
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a2e      	ldr	r2, [pc, #184]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 800109e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <HAL_ETH_MspInit+0x15c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010b0:	2332      	movs	r3, #50	@ 0x32
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c0:	230b      	movs	r3, #11
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	481e      	ldr	r0, [pc, #120]	@ (8001144 <HAL_ETH_MspInit+0x160>)
 80010cc:	f000 fe3c 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010d0:	2386      	movs	r3, #134	@ 0x86
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e0:	230b      	movs	r3, #11
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4817      	ldr	r0, [pc, #92]	@ (8001148 <HAL_ETH_MspInit+0x164>)
 80010ec:	f000 fe2c 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001102:	230b      	movs	r3, #11
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	480f      	ldr	r0, [pc, #60]	@ (800114c <HAL_ETH_MspInit+0x168>)
 800110e:	f000 fe1b 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001112:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001124:	230b      	movs	r3, #11
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4808      	ldr	r0, [pc, #32]	@ (8001150 <HAL_ETH_MspInit+0x16c>)
 8001130:	f000 fe0a 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001134:	bf00      	nop
 8001136:	3738      	adds	r7, #56	@ 0x38
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40028000 	.word	0x40028000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40021800 	.word	0x40021800

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ae      	sub	sp, #184	@ 0xb8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2290      	movs	r2, #144	@ 0x90
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fa18 	bl	80045aa <memset>
  if(huart->Instance==USART3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <HAL_UART_MspInit+0xb4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d13c      	bne.n	80011fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001188:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800118a:	2300      	movs	r3, #0
 800118c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe24 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800119e:	f7ff fef7 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a13      	ldr	r2, [pc, #76]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ec:	2307      	movs	r3, #7
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_UART_MspInit+0xbc>)
 80011fa:	f000 fda5 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011fe:	bf00      	nop
 8001200:	37b8      	adds	r7, #184	@ 0xb8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004800 	.word	0x40004800
 800120c:	40023800 	.word	0x40023800
 8001210:	40020c00 	.word	0x40020c00

08001214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ae      	sub	sp, #184	@ 0xb8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2290      	movs	r2, #144	@ 0x90
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f9b8 	bl	80045aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	d159      	bne.n	80012f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001244:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001248:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fdc3 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001260:	f7ff fe96 	bl	8000f90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800127c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001296:	230a      	movs	r3, #10
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4818      	ldr	r0, [pc, #96]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012a4:	f000 fd50 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012c4:	f000 fd40 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012f8:	bf00      	nop
 80012fa:	37b8      	adds	r7, #184	@ 0xb8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <NMI_Handler+0x4>

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <UsageFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f000 f87b 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001390:	f7ff ffea 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	@ (80013cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	@ (80013d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013ba:	f003 f8ff 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff faa7 	bl	8000910 <main>
  bx  lr    
 80013c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013d0:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 80013d4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80013d8:	200007c8 	.word	0x200007c8

080013dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>

080013de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f000 f92e 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f805 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ee:	f7ff fdd5 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f93b 	bl	8001692 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f911 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	200007c4 	.word	0x200007c4

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200007c4 	.word	0x200007c4

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <__NVIC_SetPriorityGrouping+0x40>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	4313      	orrs	r3, r2
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <__NVIC_SetPriorityGrouping+0x40>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	05fa0000 	.word	0x05fa0000

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff47 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff5c 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffb0 	bl	8001600 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e086      	b.n	80017cc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d106      	bne.n	80016d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2223      	movs	r2, #35	@ 0x23
 80016cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fc87 	bl	8000fe4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_ETH_Init+0x128>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a3e      	ldr	r2, [pc, #248]	@ (80017d4 <HAL_ETH_Init+0x128>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <HAL_ETH_Init+0x128>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_ETH_Init+0x12c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a39      	ldr	r2, [pc, #228]	@ (80017d8 <HAL_ETH_Init+0x12c>)
 80016f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <HAL_ETH_Init+0x12c>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4935      	ldr	r1, [pc, #212]	@ (80017d8 <HAL_ETH_Init+0x12c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001708:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <HAL_ETH_Init+0x12c>)
 800170a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001722:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001724:	f7ff feac 	bl	8001480 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800172a:	e011      	b.n	8001750 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800172c:	f7ff fea8 	bl	8001480 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173a:	d909      	bls.n	8001750 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	22e0      	movs	r2, #224	@ 0xe0
 8001748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e03d      	b.n	80017cc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1e4      	bne.n	800172c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f97a 	bl	8001a5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fa25 	bl	8001bb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fa7b 	bl	8001c6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	461a      	mov	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9e3 	bl	8001b48 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_ETH_Init+0x130>)
 80017a0:	430b      	orrs	r3, r1
 80017a2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80017b6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2210      	movs	r2, #16
 80017c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	00020060 	.word	0x00020060

080017e0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <ETH_SetMACConfig+0x164>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7b9b      	ldrb	r3, [r3, #14]
 80017fe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	7c12      	ldrb	r2, [r2, #16]
 8001804:	2a00      	cmp	r2, #0
 8001806:	d102      	bne.n	800180e <ETH_SetMACConfig+0x2e>
 8001808:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800180c:	e000      	b.n	8001810 <ETH_SetMACConfig+0x30>
 800180e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001810:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	7c52      	ldrb	r2, [r2, #17]
 8001816:	2a00      	cmp	r2, #0
 8001818:	d102      	bne.n	8001820 <ETH_SetMACConfig+0x40>
 800181a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800181e:	e000      	b.n	8001822 <ETH_SetMACConfig+0x42>
 8001820:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001822:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	7fdb      	ldrb	r3, [r3, #31]
 800182e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001830:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	7f92      	ldrb	r2, [r2, #30]
 800183c:	2a00      	cmp	r2, #0
 800183e:	d102      	bne.n	8001846 <ETH_SetMACConfig+0x66>
 8001840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001844:	e000      	b.n	8001848 <ETH_SetMACConfig+0x68>
 8001846:	2200      	movs	r2, #0
                        macconf->Speed |
 8001848:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	7f1b      	ldrb	r3, [r3, #28]
 800184e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001850:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800185e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001866:	2a00      	cmp	r2, #0
 8001868:	d102      	bne.n	8001870 <ETH_SetMACConfig+0x90>
 800186a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186e:	e000      	b.n	8001872 <ETH_SetMACConfig+0x92>
 8001870:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001872:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7bdb      	ldrb	r3, [r3, #15]
 8001878:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800187a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001880:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001888:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800188a:	4313      	orrs	r3, r2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff fdf8 	bl	8001498 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d101      	bne.n	80018d6 <ETH_SetMACConfig+0xf6>
 80018d2:	2280      	movs	r2, #128	@ 0x80
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0xf8>
 80018d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80018e6:	2a01      	cmp	r2, #1
 80018e8:	d101      	bne.n	80018ee <ETH_SetMACConfig+0x10e>
 80018ea:	2208      	movs	r2, #8
 80018ec:	e000      	b.n	80018f0 <ETH_SetMACConfig+0x110>
 80018ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80018f8:	2a01      	cmp	r2, #1
 80018fa:	d101      	bne.n	8001900 <ETH_SetMACConfig+0x120>
 80018fc:	2204      	movs	r2, #4
 80018fe:	e000      	b.n	8001902 <ETH_SetMACConfig+0x122>
 8001900:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800190a:	2a01      	cmp	r2, #1
 800190c:	d101      	bne.n	8001912 <ETH_SetMACConfig+0x132>
 800190e:	2202      	movs	r2, #2
 8001910:	e000      	b.n	8001914 <ETH_SetMACConfig+0x134>
 8001912:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001914:	4313      	orrs	r3, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff fdb3 	bl	8001498 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	fd20810f 	.word	0xfd20810f

08001948 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4b3d      	ldr	r3, [pc, #244]	@ (8001a58 <ETH_SetDMAConfig+0x110>)
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7b1b      	ldrb	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <ETH_SetDMAConfig+0x2c>
 800196e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001972:	e000      	b.n	8001976 <ETH_SetDMAConfig+0x2e>
 8001974:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800197c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	7f52      	ldrb	r2, [r2, #29]
 8001982:	2a00      	cmp	r2, #0
 8001984:	d102      	bne.n	800198c <ETH_SetDMAConfig+0x44>
 8001986:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800198a:	e000      	b.n	800198e <ETH_SetDMAConfig+0x46>
 800198c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800198e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7b9b      	ldrb	r3, [r3, #14]
 8001994:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001996:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800199c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
 80019a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80019a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	7f9b      	ldrb	r3, [r3, #30]
 80019aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019bc:	4313      	orrs	r3, r2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019cc:	461a      	mov	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fd5a 	bl	8001498 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fd2b 	bl	8001498 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	f8de3f23 	.word	0xf8de3f23

08001a5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a6      	sub	sp, #152	@ 0x98
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001aca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ad6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fe7f 	bl	80017e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b1c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b22:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff05 	bl	8001948 <ETH_SetDMAConfig>
}
 8001b3e:	bf00      	nop
 8001b40:	3798      	adds	r7, #152	@ 0x98
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3305      	adds	r3, #5
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	3204      	adds	r2, #4
 8001b60:	7812      	ldrb	r2, [r2, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <ETH_MACAddressConfig+0x68>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3301      	adds	r3, #1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <ETH_MACAddressConfig+0x6c>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40028040 	.word	0x40028040
 8001bb4:	40028044 	.word	0x40028044

08001bb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e03e      	b.n	8001c44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	3206      	adds	r2, #6
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d80c      	bhi.n	8001c28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68d9      	ldr	r1, [r3, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	461a      	mov	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	e004      	b.n	8001c32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d9bd      	bls.n	8001bc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c5c:	611a      	str	r2, [r3, #16]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e048      	b.n	8001d0a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6919      	ldr	r1, [r3, #16]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	3212      	adds	r2, #18
 8001cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d80c      	bhi.n	8001cfa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	e004      	b.n	8001d04 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3301      	adds	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d9b3      	bls.n	8001c78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3a:	60da      	str	r2, [r3, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e175      	b.n	8002054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8164 	bne.w	800204e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x56>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80be 	beq.w	800204e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b66      	ldr	r3, [pc, #408]	@ (800206c <HAL_GPIO_Init+0x324>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_GPIO_Init+0x324>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b63      	ldr	r3, [pc, #396]	@ (800206c <HAL_GPIO_Init+0x324>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eea:	4a61      	ldr	r2, [pc, #388]	@ (8002070 <HAL_GPIO_Init+0x328>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	@ (8002074 <HAL_GPIO_Init+0x32c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d037      	beq.n	8001f86 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a57      	ldr	r2, [pc, #348]	@ (8002078 <HAL_GPIO_Init+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a56      	ldr	r2, [pc, #344]	@ (800207c <HAL_GPIO_Init+0x334>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a55      	ldr	r2, [pc, #340]	@ (8002080 <HAL_GPIO_Init+0x338>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a54      	ldr	r2, [pc, #336]	@ (8002084 <HAL_GPIO_Init+0x33c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a53      	ldr	r2, [pc, #332]	@ (8002088 <HAL_GPIO_Init+0x340>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	@ (800208c <HAL_GPIO_Init+0x344>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a51      	ldr	r2, [pc, #324]	@ (8002090 <HAL_GPIO_Init+0x348>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a50      	ldr	r2, [pc, #320]	@ (8002094 <HAL_GPIO_Init+0x34c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4f      	ldr	r2, [pc, #316]	@ (8002098 <HAL_GPIO_Init+0x350>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f5e:	2309      	movs	r3, #9
 8001f60:	e012      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f62:	230a      	movs	r3, #10
 8001f64:	e010      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e00e      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	@ (8002070 <HAL_GPIO_Init+0x328>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_GPIO_Init+0x354>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_GPIO_Init+0x354>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b32      	ldr	r3, [pc, #200]	@ (800209c <HAL_GPIO_Init+0x354>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_GPIO_Init+0x354>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	@ (800209c <HAL_GPIO_Init+0x354>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_GPIO_Init+0x354>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002024:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_GPIO_Init+0x354>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002048:	4a14      	ldr	r2, [pc, #80]	@ (800209c <HAL_GPIO_Init+0x354>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae86 	bls.w	8001d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	@ 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40021c00 	.word	0x40021c00
 8002094:	40022000 	.word	0x40022000
 8002098:	40022400 	.word	0x40022400
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af02      	add	r7, sp, #8
 8002108:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e108      	b.n	8002326 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f870 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2203      	movs	r2, #3
 8002138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002142:	d102      	bne.n	800214a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f001 ff96 	bl	8004080 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7c1a      	ldrb	r2, [r3, #16]
 800215c:	f88d 2000 	strb.w	r2, [sp]
 8002160:	3304      	adds	r3, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	f001 ff32 	bl	8003fcc <USB_CoreInit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0d5      	b.n	8002326 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f001 ff8e 	bl	80040a2 <USB_SetCurrentMode>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0c6      	b.n	8002326 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e04a      	b.n	8002234 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3315      	adds	r3, #21
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3314      	adds	r3, #20
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	b298      	uxth	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	332e      	adds	r3, #46	@ 0x2e
 80021da:	4602      	mov	r2, r0
 80021dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3318      	adds	r3, #24
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	331c      	adds	r3, #28
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3320      	adds	r3, #32
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3324      	adds	r3, #36	@ 0x24
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	3301      	adds	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	791b      	ldrb	r3, [r3, #4]
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3af      	bcc.n	800219e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e044      	b.n	80022ce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3b5      	bcc.n	8002244 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7c1a      	ldrb	r2, [r3, #16]
 80022e0:	f88d 2000 	strb.w	r2, [sp]
 80022e4:	3304      	adds	r3, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	f001 ff28 	bl	800413c <USB_DevInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e013      	b.n	8002326 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7b1b      	ldrb	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f80b 	bl	8002330 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 f8e3 	bl	80044ea <USB_DevDisconnect>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800235e:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_PCDEx_ActivateLPM+0x44>)
 8002360:	4313      	orrs	r3, r2
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	10000003 	.word	0x10000003

08002378 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	4a22      	ldr	r2, [pc, #136]	@ (8002430 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ae:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <HAL_PWREx_EnableOverDrive+0x98>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c6:	f7ff f85b 	bl	8001480 <HAL_GetTick>
 80023ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023cc:	e009      	b.n	80023e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023ce:	f7ff f857 	bl	8001480 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023dc:	d901      	bls.n	80023e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e022      	b.n	8002428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ee:	d1ee      	bne.n	80023ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fc:	f7ff f840 	bl	8001480 <HAL_GetTick>
 8002400:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002402:	e009      	b.n	8002418 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002404:	f7ff f83c 	bl	8001480 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002412:	d901      	bls.n	8002418 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e007      	b.n	8002428 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_PWREx_EnableOverDrive+0x9c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002424:	d1ee      	bne.n	8002404 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e29b      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8087 	beq.w	800256a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b96      	ldr	r3, [pc, #600]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00c      	beq.n	8002482 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002468:	4b93      	ldr	r3, [pc, #588]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d112      	bne.n	800249a <HAL_RCC_OscConfig+0x62>
 8002474:	4b90      	ldr	r3, [pc, #576]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b8d      	ldr	r3, [pc, #564]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d06c      	beq.n	8002568 <HAL_RCC_OscConfig+0x130>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d168      	bne.n	8002568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e275      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7a>
 80024a4:	4b84      	ldr	r3, [pc, #528]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a83      	ldr	r2, [pc, #524]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e02e      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x9c>
 80024ba:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 80024de:	4b76      	ldr	r3, [pc, #472]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a75      	ldr	r2, [pc, #468]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a72      	ldr	r2, [pc, #456]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xd8>
 80024f8:	4b6f      	ldr	r3, [pc, #444]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6e      	ldr	r2, [pc, #440]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b6c      	ldr	r3, [pc, #432]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6b      	ldr	r2, [pc, #428]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ffb2 	bl	8001480 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ffae 	bl	8001480 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	@ 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e229      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b61      	ldr	r3, [pc, #388]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe ff9e 	bl	8001480 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe ff9a 	bl	8001480 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	@ 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e215      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x110>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d069      	beq.n	800264a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002576:	4b50      	ldr	r3, [pc, #320]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b4d      	ldr	r3, [pc, #308]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x190>
 800258e:	4b4a      	ldr	r3, [pc, #296]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1e9      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	493d      	ldr	r1, [pc, #244]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e040      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a38      	ldr	r2, [pc, #224]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff50 	bl	8001480 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe ff4c 	bl	8001480 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1c7      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b30      	ldr	r3, [pc, #192]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4929      	ldr	r1, [pc, #164]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
 8002616:	e018      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a26      	ldr	r2, [pc, #152]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe ff2c 	bl	8001480 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7fe ff28 	bl	8001480 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1a3      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d038      	beq.n	80026c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002662:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe ff09 	bl	8001480 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe ff05 	bl	8001480 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e180      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x23a>
 8002690:	e01a      	b.n	80026c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe feef 	bl	8001480 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe feeb 	bl	8001480 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d903      	bls.n	80026bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e166      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
 80026b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b92      	ldr	r3, [pc, #584]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a4 	beq.w	800281e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8c      	ldr	r3, [pc, #560]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a88      	ldr	r2, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b86      	ldr	r3, [pc, #536]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fe:	4b83      	ldr	r3, [pc, #524]	@ (800290c <HAL_RCC_OscConfig+0x4d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800270a:	4b80      	ldr	r3, [pc, #512]	@ (800290c <HAL_RCC_OscConfig+0x4d4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7f      	ldr	r2, [pc, #508]	@ (800290c <HAL_RCC_OscConfig+0x4d4>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe feb3 	bl	8001480 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe feaf 	bl	8001480 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e12a      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCC_OscConfig+0x4d4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x31a>
 8002744:	4b70      	ldr	r3, [pc, #448]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	4a6f      	ldr	r2, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x33c>
 800275a:	4b6b      	ldr	r3, [pc, #428]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a6a      	ldr	r2, [pc, #424]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	4b68      	ldr	r3, [pc, #416]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a67      	ldr	r2, [pc, #412]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x35e>
 800277c:	4b62      	ldr	r3, [pc, #392]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a61      	ldr	r2, [pc, #388]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	@ 0x70
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
 8002796:	4b5c      	ldr	r3, [pc, #368]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a5b      	ldr	r2, [pc, #364]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a2:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a58      	ldr	r2, [pc, #352]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fe63 	bl	8001480 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fe5f 	bl	8001480 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0d8      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x386>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe fe4d 	bl	8001480 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fe49 	bl	8001480 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0c2      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a3c      	ldr	r2, [pc, #240]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80ae 	beq.w	8002984 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b37      	ldr	r3, [pc, #220]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d06d      	beq.n	8002910 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d14b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b32      	ldr	r3, [pc, #200]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a31      	ldr	r2, [pc, #196]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fe1a 	bl	8001480 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fe16 	bl	8001480 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e091      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b29      	ldr	r3, [pc, #164]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	071b      	lsls	r3, r3, #28
 800289a:	491b      	ldr	r1, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fde8 	bl	8001480 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fde4 	bl	8001480 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e05f      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x47c>
 80028d2:	e057      	b.n	8002984 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fdce 	bl	8001480 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fdca 	bl	8001480 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e045      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4b0>
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x54c>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002910:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <HAL_RCC_OscConfig+0x558>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d030      	beq.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d129      	bne.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d122      	bne.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002946:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d119      	bne.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d10f      	bne.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d0      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b67      	ldr	r3, [pc, #412]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 020f 	bic.w	r2, r3, #15
 80029c2:	4965      	ldr	r1, [pc, #404]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e073      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3d      	ldr	r3, [pc, #244]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4936      	ldr	r1, [pc, #216]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fe fcfa 	bl	8001480 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fe fcf6 	bl	8001480 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e053      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d210      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	4922      	ldr	r1, [pc, #136]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f821 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	490a      	ldr	r1, [pc, #40]	@ (8002b60 <HAL_RCC_ClockConfig+0x1cc>)
 8002b38:	5ccb      	ldrb	r3, [r1, r3]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x1d0>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1d4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fc56 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	080046b4 	.word	0x080046b4
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b70:	b094      	sub	sp, #80	@ 0x50
 8002b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b78:	2300      	movs	r3, #0
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d00d      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x40>
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	f200 80e1 	bhi.w	8002d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b9e:	e0db      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b73      	ldr	r3, [pc, #460]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ba4:	e0db      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba6:	4b73      	ldr	r3, [pc, #460]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002baa:	e0d8      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4b6f      	ldr	r3, [pc, #444]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	0159      	lsls	r1, r3, #5
 8002bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf0:	0150      	lsls	r0, r2, #5
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	1a51      	subs	r1, r2, r1
 8002bfa:	6139      	str	r1, [r7, #16]
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c10:	4659      	mov	r1, fp
 8002c12:	018b      	lsls	r3, r1, #6
 8002c14:	4651      	mov	r1, sl
 8002c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	018a      	lsls	r2, r1, #6
 8002c1e:	4651      	mov	r1, sl
 8002c20:	ebb2 0801 	subs.w	r8, r2, r1
 8002c24:	4659      	mov	r1, fp
 8002c26:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3e:	4690      	mov	r8, r2
 8002c40:	4699      	mov	r9, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	eb18 0303 	adds.w	r3, r8, r3
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	462b      	mov	r3, r5
 8002c4c:	eb49 0303 	adc.w	r3, r9, r3
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	024b      	lsls	r3, r1, #9
 8002c62:	4621      	mov	r1, r4
 8002c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c68:	4621      	mov	r1, r4
 8002c6a:	024a      	lsls	r2, r1, #9
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c72:	2200      	movs	r2, #0
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c7c:	f7fd fadc 	bl	8000238 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c88:	e058      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b38      	ldr	r3, [pc, #224]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	4611      	mov	r1, r2
 8002c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	0159      	lsls	r1, r3, #5
 8002cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb6:	0150      	lsls	r0, r2, #5
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	00eb      	lsls	r3, r5, #3
 8002cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf2:	00e2      	lsls	r2, r4, #3
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	461d      	mov	r5, r3
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	18e3      	adds	r3, r4, r3
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	464b      	mov	r3, r9
 8002d00:	eb45 0303 	adc.w	r3, r5, r3
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d12:	4629      	mov	r1, r5
 8002d14:	028b      	lsls	r3, r1, #10
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	028a      	lsls	r2, r1, #10
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d26:	2200      	movs	r2, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	61fa      	str	r2, [r7, #28]
 8002d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d30:	f7fd fa82 	bl	8000238 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	3301      	adds	r3, #1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3750      	adds	r7, #80	@ 0x50
 8002d64:	46bd      	mov	sp, r7
 8002d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080046c4 	.word	0x080046c4

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	080046c4 	.word	0x080046c4

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d012      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e08:	4b69      	ldr	r3, [pc, #420]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	4b66      	ldr	r3, [pc, #408]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1c:	4964      	ldr	r1, [pc, #400]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	4959      	ldr	r1, [pc, #356]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e76:	4b4e      	ldr	r3, [pc, #312]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	494a      	ldr	r1, [pc, #296]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808b 	beq.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	4a39      	ldr	r2, [pc, #228]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002edc:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe faca 	bl	8001480 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7fe fac6 	bl	8001480 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	@ 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e38f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f02:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f0e:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d035      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d02e      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f36:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f4e:	4a18      	ldr	r2, [pc, #96]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d114      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fa8e 	bl	8001480 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fa8a 	bl	8001480 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e351      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ee      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f96:	d111      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	4901      	ldr	r1, [pc, #4]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	0ffffcff 	.word	0x0ffffcff
 8002fbc:	4bac      	ldr	r3, [pc, #688]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4aab      	ldr	r2, [pc, #684]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	49a6      	ldr	r1, [pc, #664]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fec:	4aa0      	ldr	r2, [pc, #640]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	499b      	ldr	r1, [pc, #620]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003014:	4b96      	ldr	r3, [pc, #600]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003022:	4993      	ldr	r1, [pc, #588]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003036:	4b8e      	ldr	r3, [pc, #568]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003044:	498a      	ldr	r1, [pc, #552]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003058:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003066:	4982      	ldr	r1, [pc, #520]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800307a:	4b7d      	ldr	r3, [pc, #500]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	4979      	ldr	r1, [pc, #484]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309c:	4b74      	ldr	r3, [pc, #464]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	4971      	ldr	r1, [pc, #452]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030be:	4b6c      	ldr	r3, [pc, #432]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	f023 020c 	bic.w	r2, r3, #12
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030cc:	4968      	ldr	r1, [pc, #416]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e0:	4b63      	ldr	r3, [pc, #396]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	4960      	ldr	r1, [pc, #384]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003102:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	4957      	ldr	r1, [pc, #348]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003124:	4b52      	ldr	r3, [pc, #328]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	494f      	ldr	r1, [pc, #316]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4946      	ldr	r1, [pc, #280]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003168:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	493e      	ldr	r1, [pc, #248]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800318a:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	4935      	ldr	r1, [pc, #212]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ac:	4b30      	ldr	r3, [pc, #192]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ba:	492d      	ldr	r1, [pc, #180]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031dc:	4924      	ldr	r1, [pc, #144]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800320e:	4b18      	ldr	r3, [pc, #96]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003214:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321c:	4914      	ldr	r1, [pc, #80]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003230:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003236:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003240:	490b      	ldr	r1, [pc, #44]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003264:	4902      	ldr	r1, [pc, #8]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800326c:	e002      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003280:	4b8a      	ldr	r3, [pc, #552]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003290:	4986      	ldr	r1, [pc, #536]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032a4:	4b81      	ldr	r3, [pc, #516]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b4:	497d      	ldr	r1, [pc, #500]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d006      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80d6 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032d0:	4b76      	ldr	r3, [pc, #472]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a75      	ldr	r2, [pc, #468]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fe f8d0 	bl	8001480 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032e4:	f7fe f8cc 	bl	8001480 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	@ 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e195      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f6:	4b6d      	ldr	r3, [pc, #436]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11d      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003316:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003324:	4b61      	ldr	r3, [pc, #388]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	019a      	lsls	r2, r3, #6
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	071b      	lsls	r3, r3, #28
 800334a:	4958      	ldr	r1, [pc, #352]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800337c:	d129      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800337e:	4b4b      	ldr	r3, [pc, #300]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800338c:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003392:	0f1b      	lsrs	r3, r3, #28
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	019a      	lsls	r2, r3, #6
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	493e      	ldr	r1, [pc, #248]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ba:	4b3c      	ldr	r3, [pc, #240]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c0:	f023 021f 	bic.w	r2, r3, #31
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4938      	ldr	r1, [pc, #224]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01d      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033de:	4b33      	ldr	r3, [pc, #204]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e4:	0e1b      	lsrs	r3, r3, #24
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ec:	4b2f      	ldr	r3, [pc, #188]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f2:	0f1b      	lsrs	r3, r3, #28
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	019a      	lsls	r2, r3, #6
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	4926      	ldr	r1, [pc, #152]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d011      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	019a      	lsls	r2, r3, #6
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	491a      	ldr	r1, [pc, #104]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003456:	f7fe f813 	bl	8001480 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800345e:	f7fe f80f 	bl	8001480 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	@ 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0d8      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80ce 	bne.w	8003620 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003490:	f7fd fff6 	bl	8001480 <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003496:	e00b      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003498:	f7fd fff2 	bl	8001480 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	@ 0x64
 80034a4:	d904      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0bb      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b0:	4b5e      	ldr	r3, [pc, #376]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034bc:	d0ec      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d02e      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d12a      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034e6:	4b51      	ldr	r3, [pc, #324]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f4:	4b4d      	ldr	r3, [pc, #308]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	0f1b      	lsrs	r3, r3, #28
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	019a      	lsls	r2, r3, #6
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	4944      	ldr	r1, [pc, #272]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003522:	4b42      	ldr	r3, [pc, #264]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003528:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	493d      	ldr	r1, [pc, #244]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003550:	d11d      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003552:	4b36      	ldr	r3, [pc, #216]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	0e1b      	lsrs	r3, r3, #24
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003560:	4b32      	ldr	r3, [pc, #200]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	0f1b      	lsrs	r3, r3, #28
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	019a      	lsls	r2, r3, #6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	071b      	lsls	r3, r3, #28
 8003586:	4929      	ldr	r1, [pc, #164]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d028      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a0:	0e1b      	lsrs	r3, r3, #24
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035a8:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	019a      	lsls	r2, r3, #6
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	4917      	ldr	r1, [pc, #92]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	4911      	ldr	r1, [pc, #68]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0e      	ldr	r2, [pc, #56]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7fd ff42 	bl	8001480 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003600:	f7fd ff3e 	bl	8001480 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e007      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800361e:	d1ef      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e040      	b.n	80036c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fd7e 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa8c 	bl	8003b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f825 	bl	80036cc <UART_SetConfig>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e01b      	b.n	80036c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800369a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb0b 	bl	8003cd8 <UART_CheckIdleState>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4ba6      	ldr	r3, [pc, #664]	@ (8003990 <UART_SetConfig+0x2c4>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6979      	ldr	r1, [r7, #20]
 8003700:	430b      	orrs	r3, r1
 8003702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a94      	ldr	r2, [pc, #592]	@ (8003994 <UART_SetConfig+0x2c8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d120      	bne.n	800378a <UART_SetConfig+0xbe>
 8003748:	4b93      	ldr	r3, [pc, #588]	@ (8003998 <UART_SetConfig+0x2cc>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b03      	cmp	r3, #3
 8003754:	d816      	bhi.n	8003784 <UART_SetConfig+0xb8>
 8003756:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <UART_SetConfig+0x90>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	0800376d 	.word	0x0800376d
 8003760:	08003779 	.word	0x08003779
 8003764:	08003773 	.word	0x08003773
 8003768:	0800377f 	.word	0x0800377f
 800376c:	2301      	movs	r3, #1
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e150      	b.n	8003a14 <UART_SetConfig+0x348>
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e14d      	b.n	8003a14 <UART_SetConfig+0x348>
 8003778:	2304      	movs	r3, #4
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e14a      	b.n	8003a14 <UART_SetConfig+0x348>
 800377e:	2308      	movs	r3, #8
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e147      	b.n	8003a14 <UART_SetConfig+0x348>
 8003784:	2310      	movs	r3, #16
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e144      	b.n	8003a14 <UART_SetConfig+0x348>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a83      	ldr	r2, [pc, #524]	@ (800399c <UART_SetConfig+0x2d0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d132      	bne.n	80037fa <UART_SetConfig+0x12e>
 8003794:	4b80      	ldr	r3, [pc, #512]	@ (8003998 <UART_SetConfig+0x2cc>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d828      	bhi.n	80037f4 <UART_SetConfig+0x128>
 80037a2:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <UART_SetConfig+0xdc>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037f5 	.word	0x080037f5
 80037b0:	080037f5 	.word	0x080037f5
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037e9 	.word	0x080037e9
 80037bc:	080037f5 	.word	0x080037f5
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080037f5 	.word	0x080037f5
 80037c8:	080037e3 	.word	0x080037e3
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037f5 	.word	0x080037f5
 80037d8:	080037ef 	.word	0x080037ef
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e118      	b.n	8003a14 <UART_SetConfig+0x348>
 80037e2:	2302      	movs	r3, #2
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e115      	b.n	8003a14 <UART_SetConfig+0x348>
 80037e8:	2304      	movs	r3, #4
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e112      	b.n	8003a14 <UART_SetConfig+0x348>
 80037ee:	2308      	movs	r3, #8
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e10f      	b.n	8003a14 <UART_SetConfig+0x348>
 80037f4:	2310      	movs	r3, #16
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e10c      	b.n	8003a14 <UART_SetConfig+0x348>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a68      	ldr	r2, [pc, #416]	@ (80039a0 <UART_SetConfig+0x2d4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d120      	bne.n	8003846 <UART_SetConfig+0x17a>
 8003804:	4b64      	ldr	r3, [pc, #400]	@ (8003998 <UART_SetConfig+0x2cc>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800380e:	2b30      	cmp	r3, #48	@ 0x30
 8003810:	d013      	beq.n	800383a <UART_SetConfig+0x16e>
 8003812:	2b30      	cmp	r3, #48	@ 0x30
 8003814:	d814      	bhi.n	8003840 <UART_SetConfig+0x174>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d009      	beq.n	800382e <UART_SetConfig+0x162>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d810      	bhi.n	8003840 <UART_SetConfig+0x174>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <UART_SetConfig+0x15c>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x168>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x174>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0f2      	b.n	8003a14 <UART_SetConfig+0x348>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0ef      	b.n	8003a14 <UART_SetConfig+0x348>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0ec      	b.n	8003a14 <UART_SetConfig+0x348>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0e9      	b.n	8003a14 <UART_SetConfig+0x348>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0e6      	b.n	8003a14 <UART_SetConfig+0x348>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a56      	ldr	r2, [pc, #344]	@ (80039a4 <UART_SetConfig+0x2d8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d120      	bne.n	8003892 <UART_SetConfig+0x1c6>
 8003850:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <UART_SetConfig+0x2cc>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800385a:	2bc0      	cmp	r3, #192	@ 0xc0
 800385c:	d013      	beq.n	8003886 <UART_SetConfig+0x1ba>
 800385e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003860:	d814      	bhi.n	800388c <UART_SetConfig+0x1c0>
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d009      	beq.n	800387a <UART_SetConfig+0x1ae>
 8003866:	2b80      	cmp	r3, #128	@ 0x80
 8003868:	d810      	bhi.n	800388c <UART_SetConfig+0x1c0>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <UART_SetConfig+0x1a8>
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d006      	beq.n	8003880 <UART_SetConfig+0x1b4>
 8003872:	e00b      	b.n	800388c <UART_SetConfig+0x1c0>
 8003874:	2300      	movs	r3, #0
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0cc      	b.n	8003a14 <UART_SetConfig+0x348>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e0c9      	b.n	8003a14 <UART_SetConfig+0x348>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0c6      	b.n	8003a14 <UART_SetConfig+0x348>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e0c3      	b.n	8003a14 <UART_SetConfig+0x348>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e0c0      	b.n	8003a14 <UART_SetConfig+0x348>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a44      	ldr	r2, [pc, #272]	@ (80039a8 <UART_SetConfig+0x2dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d125      	bne.n	80038e8 <UART_SetConfig+0x21c>
 800389c:	4b3e      	ldr	r3, [pc, #248]	@ (8003998 <UART_SetConfig+0x2cc>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038aa:	d017      	beq.n	80038dc <UART_SetConfig+0x210>
 80038ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b0:	d817      	bhi.n	80038e2 <UART_SetConfig+0x216>
 80038b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b6:	d00b      	beq.n	80038d0 <UART_SetConfig+0x204>
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038bc:	d811      	bhi.n	80038e2 <UART_SetConfig+0x216>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <UART_SetConfig+0x1fe>
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c6:	d006      	beq.n	80038d6 <UART_SetConfig+0x20a>
 80038c8:	e00b      	b.n	80038e2 <UART_SetConfig+0x216>
 80038ca:	2300      	movs	r3, #0
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e0a1      	b.n	8003a14 <UART_SetConfig+0x348>
 80038d0:	2302      	movs	r3, #2
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e09e      	b.n	8003a14 <UART_SetConfig+0x348>
 80038d6:	2304      	movs	r3, #4
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e09b      	b.n	8003a14 <UART_SetConfig+0x348>
 80038dc:	2308      	movs	r3, #8
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e098      	b.n	8003a14 <UART_SetConfig+0x348>
 80038e2:	2310      	movs	r3, #16
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e095      	b.n	8003a14 <UART_SetConfig+0x348>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2f      	ldr	r2, [pc, #188]	@ (80039ac <UART_SetConfig+0x2e0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d125      	bne.n	800393e <UART_SetConfig+0x272>
 80038f2:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <UART_SetConfig+0x2cc>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003900:	d017      	beq.n	8003932 <UART_SetConfig+0x266>
 8003902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0x26c>
 8003908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800390c:	d00b      	beq.n	8003926 <UART_SetConfig+0x25a>
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003912:	d811      	bhi.n	8003938 <UART_SetConfig+0x26c>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x254>
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x260>
 800391e:	e00b      	b.n	8003938 <UART_SetConfig+0x26c>
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e076      	b.n	8003a14 <UART_SetConfig+0x348>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e073      	b.n	8003a14 <UART_SetConfig+0x348>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e070      	b.n	8003a14 <UART_SetConfig+0x348>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e06d      	b.n	8003a14 <UART_SetConfig+0x348>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e06a      	b.n	8003a14 <UART_SetConfig+0x348>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1b      	ldr	r2, [pc, #108]	@ (80039b0 <UART_SetConfig+0x2e4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d138      	bne.n	80039ba <UART_SetConfig+0x2ee>
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <UART_SetConfig+0x2cc>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003956:	d017      	beq.n	8003988 <UART_SetConfig+0x2bc>
 8003958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800395c:	d82a      	bhi.n	80039b4 <UART_SetConfig+0x2e8>
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003962:	d00b      	beq.n	800397c <UART_SetConfig+0x2b0>
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003968:	d824      	bhi.n	80039b4 <UART_SetConfig+0x2e8>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <UART_SetConfig+0x2aa>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	d006      	beq.n	8003982 <UART_SetConfig+0x2b6>
 8003974:	e01e      	b.n	80039b4 <UART_SetConfig+0x2e8>
 8003976:	2300      	movs	r3, #0
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e04b      	b.n	8003a14 <UART_SetConfig+0x348>
 800397c:	2302      	movs	r3, #2
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e048      	b.n	8003a14 <UART_SetConfig+0x348>
 8003982:	2304      	movs	r3, #4
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e045      	b.n	8003a14 <UART_SetConfig+0x348>
 8003988:	2308      	movs	r3, #8
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e042      	b.n	8003a14 <UART_SetConfig+0x348>
 800398e:	bf00      	nop
 8003990:	efff69f3 	.word	0xefff69f3
 8003994:	40011000 	.word	0x40011000
 8003998:	40023800 	.word	0x40023800
 800399c:	40004400 	.word	0x40004400
 80039a0:	40004800 	.word	0x40004800
 80039a4:	40004c00 	.word	0x40004c00
 80039a8:	40005000 	.word	0x40005000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	40007800 	.word	0x40007800
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e02c      	b.n	8003a14 <UART_SetConfig+0x348>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	@ (8003b88 <UART_SetConfig+0x4bc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d125      	bne.n	8003a10 <UART_SetConfig+0x344>
 80039c4:	4b71      	ldr	r3, [pc, #452]	@ (8003b8c <UART_SetConfig+0x4c0>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80039ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039d2:	d017      	beq.n	8003a04 <UART_SetConfig+0x338>
 80039d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80039d8:	d817      	bhi.n	8003a0a <UART_SetConfig+0x33e>
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039de:	d00b      	beq.n	80039f8 <UART_SetConfig+0x32c>
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e4:	d811      	bhi.n	8003a0a <UART_SetConfig+0x33e>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <UART_SetConfig+0x326>
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ee:	d006      	beq.n	80039fe <UART_SetConfig+0x332>
 80039f0:	e00b      	b.n	8003a0a <UART_SetConfig+0x33e>
 80039f2:	2300      	movs	r3, #0
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e00d      	b.n	8003a14 <UART_SetConfig+0x348>
 80039f8:	2302      	movs	r3, #2
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e00a      	b.n	8003a14 <UART_SetConfig+0x348>
 80039fe:	2304      	movs	r3, #4
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e007      	b.n	8003a14 <UART_SetConfig+0x348>
 8003a04:	2308      	movs	r3, #8
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e004      	b.n	8003a14 <UART_SetConfig+0x348>
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e001      	b.n	8003a14 <UART_SetConfig+0x348>
 8003a10:	2310      	movs	r3, #16
 8003a12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1c:	d15b      	bne.n	8003ad6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a1e:	7ffb      	ldrb	r3, [r7, #31]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d828      	bhi.n	8003a76 <UART_SetConfig+0x3aa>
 8003a24:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <UART_SetConfig+0x360>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7ff f99e 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003a54:	61b8      	str	r0, [r7, #24]
        break;
 8003a56:	e013      	b.n	8003a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7ff f9ae 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	61b8      	str	r0, [r7, #24]
        break;
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	@ (8003b90 <UART_SetConfig+0x4c4>)
 8003a62:	61bb      	str	r3, [r7, #24]
        break;
 8003a64:	e00c      	b.n	8003a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7ff f881 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8003a6a:	61b8      	str	r0, [r7, #24]
        break;
 8003a6c:	e008      	b.n	8003a80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d074      	beq.n	8003b70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	005a      	lsls	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d916      	bls.n	8003ad0 <UART_SetConfig+0x404>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa8:	d212      	bcs.n	8003ad0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f023 030f 	bic.w	r3, r3, #15
 8003ab2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	89fa      	ldrh	r2, [r7, #14]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	e04f      	b.n	8003b70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77bb      	strb	r3, [r7, #30]
 8003ad4:	e04c      	b.n	8003b70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad6:	7ffb      	ldrb	r3, [r7, #31]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d828      	bhi.n	8003b2e <UART_SetConfig+0x462>
 8003adc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0x418>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7ff f942 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e013      	b.n	8003b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7ff f952 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <UART_SetConfig+0x4c4>)
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e00c      	b.n	8003b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7ff f825 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8003b22:	61b8      	str	r0, [r7, #24]
        break;
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77bb      	strb	r3, [r7, #30]
        break;
 8003b36:	bf00      	nop
    }

    if (pclk != 0U)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d018      	beq.n	8003b70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085a      	lsrs	r2, r3, #1
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d909      	bls.n	8003b6c <UART_SetConfig+0x4a0>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5e:	d205      	bcs.n	8003b6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e001      	b.n	8003b70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40007c00 	.word	0x40007c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400

08003b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c92:	d10a      	bne.n	8003caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b098      	sub	sp, #96	@ 0x60
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce8:	f7fd fbca 	bl	8001480 <HAL_GetTick>
 8003cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d12e      	bne.n	8003d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f88c 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d021      	beq.n	8003d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e6      	bne.n	8003d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e062      	b.n	8003e20 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d149      	bne.n	8003dfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f856 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d03c      	beq.n	8003dfc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd4:	61fa      	str	r2, [r7, #28]
 8003dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	617b      	str	r3, [r7, #20]
   return(result);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e011      	b.n	8003e20 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3758      	adds	r7, #88	@ 0x58
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	e04f      	b.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d04b      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fd fb1d 	bl	8001480 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e04e      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d037      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b80      	cmp	r3, #128	@ 0x80
 8003e6e:	d034      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d031      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d110      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f838 	bl	8003f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2208      	movs	r2, #8
 8003e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e029      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb4:	d111      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f81e 	bl	8003f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00f      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d0a0      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b095      	sub	sp, #84	@ 0x54
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e6      	bne.n	8003f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d118      	bne.n	8003faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6979      	ldr	r1, [r7, #20]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fbe:	bf00      	nop
 8003fc0:	3754      	adds	r7, #84	@ 0x54
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fcc:	b084      	sub	sp, #16
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	f107 001c 	add.w	r0, r7, #28
 8003fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d121      	bne.n	800402a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b21      	ldr	r3, [pc, #132]	@ (800407c <USB_CoreInit+0xb0>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800400a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa92 	bl	8004548 <USB_CoreReset>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e010      	b.n	800404c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa86 	bl	8004548 <USB_CoreReset>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800404c:	7fbb      	ldrb	r3, [r7, #30]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10b      	bne.n	800406a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f043 0206 	orr.w	r2, r3, #6
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004076:	b004      	add	sp, #16
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	ffbdffbf 	.word	0xffbdffbf

08004080 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 0201 	bic.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d115      	bne.n	80040f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040d0:	200a      	movs	r0, #10
 80040d2:	f7fd f9e1 	bl	8001498 <HAL_Delay>
      ms += 10U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	330a      	adds	r3, #10
 80040da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa25 	bl	800452c <USB_GetMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d01e      	beq.n	8004126 <USB_SetCurrentMode+0x84>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80040ec:	d9f0      	bls.n	80040d0 <USB_SetCurrentMode+0x2e>
 80040ee:	e01a      	b.n	8004126 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d115      	bne.n	8004122 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004102:	200a      	movs	r0, #10
 8004104:	f7fd f9c8 	bl	8001498 <HAL_Delay>
      ms += 10U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	330a      	adds	r3, #10
 800410c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa0c 	bl	800452c <USB_GetMode>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <USB_SetCurrentMode+0x84>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2bc7      	cmp	r3, #199	@ 0xc7
 800411e:	d9f0      	bls.n	8004102 <USB_SetCurrentMode+0x60>
 8004120:	e001      	b.n	8004126 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e005      	b.n	8004132 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2bc8      	cmp	r3, #200	@ 0xc8
 800412a:	d101      	bne.n	8004130 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800413c:	b084      	sub	sp, #16
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800414a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	e009      	b.n	8004170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3340      	adds	r3, #64	@ 0x40
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b0e      	cmp	r3, #14
 8004174:	d9f2      	bls.n	800415c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004176:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11c      	bne.n	80041b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800418c:	f043 0302 	orr.w	r3, r3, #2
 8004190:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e005      	b.n	80041c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10d      	bne.n	80041f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041e0:	2100      	movs	r1, #0
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f968 	bl	80044b8 <USB_SetDevSpeed>
 80041e8:	e008      	b.n	80041fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ea:	2101      	movs	r1, #1
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f963 	bl	80044b8 <USB_SetDevSpeed>
 80041f2:	e003      	b.n	80041fc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041f4:	2103      	movs	r1, #3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f95e 	bl	80044b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041fc:	2110      	movs	r1, #16
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8fa 	bl	80043f8 <USB_FlushTxFifo>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f924 	bl	800445c <USB_FlushRxFifo>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004224:	461a      	mov	r2, r3
 8004226:	2300      	movs	r3, #0
 8004228:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	461a      	mov	r2, r3
 8004232:	2300      	movs	r3, #0
 8004234:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	e043      	b.n	80042d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800425e:	d118      	bne.n	8004292 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004272:	461a      	mov	r2, r3
 8004274:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e013      	b.n	80042a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004288:	461a      	mov	r2, r3
 800428a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e008      	b.n	80042a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c2:	461a      	mov	r2, r3
 80042c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	3301      	adds	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042d4:	461a      	mov	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4293      	cmp	r3, r2
 80042da:	d3b5      	bcc.n	8004248 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e043      	b.n	800436a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042f8:	d118      	bne.n	800432c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e013      	b.n	800433e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e008      	b.n	800433e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004338:	461a      	mov	r2, r3
 800433a:	2300      	movs	r3, #0
 800433c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2300      	movs	r3, #0
 800434e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004362:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	3301      	adds	r3, #1
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800436e:	461a      	mov	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4293      	cmp	r3, r2
 8004374:	d3b5      	bcc.n	80042e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004388:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004396:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <USB_DevInit+0x2b4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f043 0208 	orr.w	r2, r3, #8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <USB_DevInit+0x2b8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ec:	b004      	add	sp, #16
 80043ee:	4770      	bx	lr
 80043f0:	803c3800 	.word	0x803c3800
 80043f4:	40000004 	.word	0x40000004

080043f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004412:	d901      	bls.n	8004418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e01b      	b.n	8004450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	daf2      	bge.n	8004406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800443c:	d901      	bls.n	8004442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e006      	b.n	8004450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b20      	cmp	r3, #32
 800444c:	d0f0      	beq.n	8004430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004474:	d901      	bls.n	800447a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e018      	b.n	80044ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	daf2      	bge.n	8004468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2210      	movs	r2, #16
 800448a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004498:	d901      	bls.n	800449e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e006      	b.n	80044ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d0f0      	beq.n	800448c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004504:	f023 0303 	bic.w	r3, r3, #3
 8004508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f003 0301 	and.w	r3, r3, #1
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004560:	d901      	bls.n	8004566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e01b      	b.n	800459e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	daf2      	bge.n	8004554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800458a:	d901      	bls.n	8004590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e006      	b.n	800459e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d0f0      	beq.n	800457e <USB_CoreReset+0x36>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <memset>:
 80045aa:	4402      	add	r2, r0
 80045ac:	4603      	mov	r3, r0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d100      	bne.n	80045b4 <memset+0xa>
 80045b2:	4770      	bx	lr
 80045b4:	f803 1b01 	strb.w	r1, [r3], #1
 80045b8:	e7f9      	b.n	80045ae <memset+0x4>
	...

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	@ (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	@ (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	@ (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 f818 	bl	8004604 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	080046d4 	.word	0x080046d4
 80045f8:	080046d4 	.word	0x080046d4
 80045fc:	080046d4 	.word	0x080046d4
 8004600:	080046d8 	.word	0x080046d8

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
